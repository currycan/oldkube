{% macro initial_cluster() -%}
{% for host in groups['etcds'] -%}{{ hostvars[host]['inventory_hostname'] }}=https://{{ hostvars[host]['ansible_' + iface].ipv4.address }}:2380{%- if not loop.last -%},{%- endif -%}{%- endfor -%}
{% endmacro -%}

# This is the configuration file for the etcd server.

# Human-readable name for this member.
name: {{ inventory_hostname }}
# Path to the data directory.
data-dir: {{ etcd_data_dir }}
# Path to the dedicated wal directory.
wal-dir: {{ etcd_wal_dir }}
# Number of committed transactions to trigger a snapshot to disk.
snapshot-count: 10000
# Time (in milliseconds) of a heartbeat interval.
heartbeat-interval: 300
# Time (in milliseconds) for an election to timeout.
election-timeout: 2000
# Raise alarms when backend size exceeds the given quota. 0 means use the default quota.
quota-backend-bytes: 6442450944
# List of comma separated URLs to listen on for peer traffic.
listen-peer-urls: '{{ etcd_listen_peer_urls }}'
# List of comma separated URLs to listen on for client traffic.
listen-client-urls: '{{ etcd_listen_client_urls }}'
# Maximum number of snapshot files to retain (0 is unlimited).
max-snapshots: 5
# Maximum number of wal files to retain (0 is unlimited).
max-wals: 5
# Comma-separated white list of origins for CORS (cross-origin resource sharing).
cors:
# List of this member's peer URLs to advertise to the rest of the cluster.
# The URLs needed to be a comma-separated list.
initial-advertise-peer-urls: '{{ etcd_initial_advertise_peer_urls }}'
# List of this member's client URLs to advertise to the public.
# The URLs needed to be a comma-separated list.
advertise-client-urls: '{{ etcd_advertise_client_urls }}'
# Discovery URL used to bootstrap the cluster.
discovery:
# Valid values include 'exit', 'proxy'
discovery-fallback: 'proxy'
# HTTP proxy to use for traffic to discovery service.
discovery-proxy:
# DNS domain used to bootstrap initial cluster.
discovery-srv:
# Initial cluster configuration for bootstrapping.
initial-cluster: '{{ initial_cluster() }}'
# Initial cluster token for the etcd cluster during bootstrap.
initial-cluster-token: '{{ etcd_initial_token }}'
# Initial cluster state ('new' or 'existing').
initial-cluster-state: '{{ etcd_initial_cluster_state }}'
# Reject reconfiguration requests that would cause quorum loss.
strict-reconfig-check: false
# Accept etcd V2 client requests
enable-v2: true
# Enable runtime profiling data via HTTP server
enable-pprof: true
# Valid values include 'on', 'readonly', 'off'
proxy: 'off'
# Time (in milliseconds) an endpoint will be held in a failed state.
proxy-failure-wait: 5000
# Time (in milliseconds) of the endpoints refresh interval.
proxy-refresh-interval: 30000
# Time (in milliseconds) for a dial to timeout.
proxy-dial-timeout: 1000
# Time (in milliseconds) for a write to timeout.
proxy-write-timeout: 5000
# Time (in milliseconds) for a read to timeout.
proxy-read-timeout: 0
client-transport-security:
  ca-file: {{ etcd_ca }}
  # Path to the client server TLS cert file.
  cert-file: {{ etcd_cert }}
  # Path to the client server TLS key file.
  key-file: {{ etcd_cert_key }}
    # Enable client cert authentication.
  client-cert-auth: true
  # Path to the client server TLS trusted CA cert file.
  trusted-ca-file: {{ etcd_ca }}
  # Client TLS using generated certificates
  auto-tls: true
peer-transport-security:
  ca-file: {{ etcd_ca }}
  # Path to the peer server TLS cert file.
  cert-file: {{ etcd_cert_peer }}
  # Path to the peer server TLS key file.
  key-file: {{ etcd_cert_peer_key }}
  # Path to the peer server TLS trusted CA cert file.
  trusted-ca-file: {{ etcd_ca }}
  # Peer TLS using generated certificates.
  auto-tls: true
# Enable debug-level logging for etcd.
debug: false
logger: zap
# Specify 'stdout' or 'stderr' to skip journald logging even when running under systemd.
log-outputs: [stderr]
# Force to create a new one member cluster.
force-new-cluster: false
auto-compaction-mode: periodic
auto-compaction-retention: "1"
max-request-bytes: 33554432

